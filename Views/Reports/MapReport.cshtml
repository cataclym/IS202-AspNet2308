@model ReportViewModel

@{
    bool isEdit = Model.ReportId != 0;
    ViewData["Title"] = isEdit ? "Rediger rapport" : "Registrer ny rapport";
    ViewBag.UseFluidContainer = true; // If using conditional container
    // Or Layout = "~/Views/Shared/_FluidLayout.cshtml"; if using separate layout
}

<!DOCTYPE html>

<html>
<head>
    <style>
        body {
            overflow: hidden; /* Prevents scrolling on the page */
        }
    </style>
</head>
<body>

<div>
    <div class="map-container">
        <div id="map" class="styledMap"></div>
    </div>

    @if (ViewData["ErrorMessage"] != null)
    {
    <div class="alert-danger m-auto mt-1 mb-1 p-1 border-radius-5">
        <p class="mb-0">@ViewData["ErrorMessage"]</p>
    </div>
    }

    <div id="descriptionForm">
        <button type="button" class="close-btn" onclick="closeForm()">&times;</button>
        <form asp-controller="Reports" asp-action="@(isEdit ? "EditMapReport" : "RegisterMapReport")"
              method="post"
              id="mapForm">
            @if (isEdit)
            {
            <input type="hidden" asp-for="ReportId" />
            }
            
            <div>
                <textarea id="meldingsBoks" class="description-textarea" asp-for="FirstMessage"
                 required minlength="5" placeholder="Beskrivelse (minst 5 tegn)"></textarea>
            </div>
            
            <div>
                <input type="hidden" id="Koordinater" asp-for="GeoJsonString" required/>
            </div>
            
            <div class="center-horizontal">
                <button type="button" class="submit-btn" onclick="submitForm()">Send inn <i class="bi bi-send"></i></button>
            </div>
            
        </form>

    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const overlay = document.getElementById('modal-overlay');
            const modal = document.getElementById('modal-content');

            if (overlay) overlay.style.display = 'none';
            if (modal) modal.style.display = 'none';
        });

        // Initialize the map
        const map = lagKart();

        // Create a FeatureGroup to store editable layers
        const drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        // Configure the drawing controls
        map.pm.addControls({
            position: 'topleft',
            rotateMode: false,
            drawMarker: true,
            drawPolygon: true,
            drawCircleMarker: false,
            drawPolyline: false,
            drawCircle: false,
            drawText: false
        });

        // Function to handle form submission
        function submitForm() {
            const layers = drawnItems.getLayers();

            if (layers.length === 0) {
                alert("Vennligst tegn et område på kartet før du sender inn.");
                return;
            }

            // Create a GeoJSON object for map data
            const geojson = {
                type: "FeatureCollection",
                features: layers.map(layer => layer.toGeoJSON())
            };

            // Debugging: Log the GeoJSON data
            console.log("GeoJSON data being submitted:", JSON.stringify(geojson));

            // Store the GeoJSON data in the hidden input field
            const koordinater = document.getElementById("Koordinater");
            koordinater.value = JSON.stringify(geojson);

            const meldingsBoks = document.getElementById("meldingsBoks");

            // Submit the form
            document.getElementById("mapForm").submit();
        }

        // Listen to the pm:create event to show the description form
        map.on('pm:create', function(e) {
            const layer = e.layer;
            drawnItems.addLayer(layer); // Add the new layer to drawnItems
            document.getElementById('descriptionForm').style.display = 'block';
        });

        // Function to close the description form
        function closeForm() {
            document.getElementById("descriptionForm").style.display = "none"; // Hides the form
        }

        @if (isEdit && !string.IsNullOrEmpty(Model.GeoJsonString))
        {
        <text>
        const existingGeoJson = @Html.Raw(Json.Serialize(Model.GeoJsonString));
        if (existingGeoJson) {
            const geojson = JSON.parse(existingGeoJson);
            const existingLayer = L.geoJSON(geojson).addTo(map); // Added directly to the map
            map.fitBounds(existingLayer.getBounds());
        }
        </text>
        }
    </script>
}
</body>
</html>

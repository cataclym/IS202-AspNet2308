@model Kartverket.Models.HomePageModel

<!DOCTYPE html>
<html>
<body>


@if (Model.User.IsAdmin)
{
    <h1 class="header1 display-4">Administrer <span class="highlight">Rapporter</span></h1>
}
else
{ 
    <h1 class="header1 display-4">Min <span class="highlight">Side</span></h1>
}

<div class="homepage">
    <div class="meld-kartfeil">
        <p>Feil i kartet? Trykk her:</p>
        <div class="center-horizontal" style="text-decoration: none">
            <form asp-action="MapReport" method="post">
                <button type="submit" class="btn-general btn-primary">Meld feil</button>
            </form>
        </div>

        <div class="password-change">
            <!-- Button to show password change form -->
            <form asp-controller="Account" asp-action="PasswordView" method="post">
                <button id="showPasswordFormBtn" class="btn-general btn-primary">Endre passord</button>
            </form>
        </div>
        <div>
            <form asp-controller="Account" asp-action="Logout" method="post">
                <button type="submit" class="btn-general btn-logout">Logg ut</button>
            </form>
        </div>
    </div>


        <div class="table-container">
            <div class="dropdown">
                <button onclick="myFunction()" class="dropbtn">Dropdown</button>
                <div id="myDropdown" class="dropdown-content">
                   
                    <!-- Via alle rapporter -->
                    <a href="#" onclick="showAllReports()">Alle rapporter</a>


                    <!-- Filteralternativer status-->
                    <a href="#" onclick="filterByStatus('ubehandlet')">Ubehandlet</a>
                    <a href="#" onclick="filterByStatus('behandlet')">Behandlet</a>
                    <a href="#" onclick="filterByStatus('under_behandling')">Under behandling</a>
                    
                    @if (Model.User.IsAdmin)
                    {
                        <!-- Sorting options for admin -->
                        <a href="#" onclick="sortTable(4)">Nyeste</a>
                        <a href="#" onclick="sortTable(4)">Eldste</a>
                    }
                    else
                    {
                        <!-- Sorting options for user -->
                        <a href="#" onclick="sortTable(3)">Nyeste</a>
                        <a href="#" onclick="sortTable(3)">Eldste</a>
                    }

                    @if (Model.User.IsAdmin)
                    {
                        <a href="#" onclick="sortTable(2)">Brukernavn</a>
                    }




                    @if (Model.User.IsAdmin)
                    {
                        <a href="#" onclick="sortTableBy(2, 'asc')">Brukernavn</a>
                    }
                    
                </div>
            </div>
            <!-- Datofiltrering -->
            <label for="dateFilter">Filter etter dato:</label>
            <input type="date" id="dateFilter" onchange="filterByDate(this.value)" />
        </div>


        
        <div class="user-information">
            @if (Model != null)
            {
            <table class="user-info-table">

                <tr class="user-table-header">

                    <th colspan="3" style="text-align: left;" class="user-table-header">Min informasjon:</th> <!-- Overskrift for tabell -->
                </tr><link href="~/css/site.css" rel="stylesheet" />

                <tr>
                    <td><strong>Brukernavn:</strong></td>
                    <td>@Model.User.Username</td>
                </tr>
                <tr>
                    <td><strong>E-post:</strong></td>
                    <td>@Model.User.Email</td>
                </tr>
                <tr>
                    <td><strong>Telefonnummer:</strong></td>
                    <td>@Model.User.Phone</td>
                </tr>
            </table>
            }
        </div>

     <!-- Tabell over rapporter -->
    @if (Model.User.IsAdmin)
    {
    <div>
        <table id="admin-table" class="user-info-table">
            <!-- Table header row for column names -->
            <thead>
            <tr>
                <th>Rapport ID</th>
                <th>Melding</th>
                <th>Brukernavn</th>
                <th>Status</th>
                <th>Opprettet</th>
                <th>Pin</th>
            </tr>
            </thead>
            <!-- Table body for reports data -->
            <tbody>
            @if (Model.Reports != null && Model.Reports.Any())
            {
            @foreach (var report in Model.Reports)
            {
                <tr data-status="@report.Status.ToString().ToLower()" data-date="@report.CreatedAt.ToString("yyyy-MM-dd")">
                <td><a asp-action="ReportView" asp-controller="Reports" asp-route-id="@report.ReportId">@report.ReportId</a></td>
                <td class="truncate-text" title="@report.FirstMessage">@report.FirstMessage</td>
                <td>@report.Username</td>
                <td>@report.Status.ToString()</td>
                <td>@report.CreatedAt.ToString("yyyy-MM-dd")</td> <!-- Vises for brukeren -->
                <td>
                    <!-- Form for Pin/Unpin -->
                    <form asp-controller="Home" asp-action="@(report.IsPinned ? "UnpinReport" : "PinReport")" method="post">
                        @Html.AntiForgeryToken() <!-- Anti-forgery token -->
                        <input type="hidden" name="reportId" value="@report.ReportId" />
                        <button type="submit" class="btn @(report.IsPinned ? "btn-success" : "btn-primary")">
                            @(report.IsPinned ? "Unpin" : "Pin")
                        </button>
                    </form>
                </td>
            </tr>
          }
        }
            else
            {
            <tr>
                <td colspan="5">Ingen rapporter tilgjengelig.</td>
            </tr>
            }
            </tbody>
        </table>
    </div>
    }
    else
    {
        <div>
                <table id="user-table" class="user-info-table">
                <!-- Table header row for column names -->
                <thead>
                <tr>
                    <th>Rapport ID</th>
                    <th>Melding</th>
                    <th>Status</th>
                    <th>Opprettet</th>
                    <th>Pin</th>
                </tr>
                </thead>
                <!-- Table body for reports data -->
                <tbody>
                @if (Model.Reports != null && Model.Reports.Any())
                {
                    @foreach (var report in Model.Reports)
                    {
                            <tr data-status="@report.Status.ToString().ToLower()" data-date="@report.CreatedAt.ToString("yyyy-MM-dd")">
                            <td><a asp-action="ReportView" asp-controller="Home" asp-route-id="@report.ReportId">@report.ReportId</a></td>
                            <td class="truncate-text" title="@report.FirstMessage">@report.FirstMessage</td>
                            <td>@report.Status.ToString()</td>
                            <td>@report.CreatedAt.ToString("yyyy-MM-dd")</td>
                            <td>
                                <!-- Form for Pin -->
                                <form asp-controller="Home" asp-action="@(report.IsPinned ? "UnpinReport" : "PinReport")" method="post">
                                    @Html.AntiForgeryToken() <!-- Anti-forgery token -->
                                    <input type="hidden" name="reportId" value="@report.ReportId" />
                                    <button type="submit" class="btn @(report.IsPinned ? "btn-success" : "btn-primary")">
                                        @(report.IsPinned ? "Unpin" : "Pin")
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">Ingen rapporter tilgjengelig.</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</div>


    <script>
        // Funksjon for Ã¥ vise og skjule dropdown
        function myFunction() {
            document.getElementById("myDropdown").classList.toggle("show");
        }


        // Lukk dropdown hvis brukeren klikker utenfor den
            window.onclick = function(event) {
            if (!event.target.matches('.dropbtn') && !event.target.closest('.dropdown-content')) {
                const dropdowns = document.getElementsByClassName("dropdown-content");
                for (let i = 0; i < dropdowns.length; i++) {
                    const openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        };

           function ensureUserInfoVisible() {
            const userInfo = document.querySelector('.user-information');
            if (userInfo) {
                userInfo.style.display = 'block';
            }
        }


        // Viser alle rapporter //
            function showAllReports() {
            const table = document.querySelector('#admin-table tbody') || document.querySelector('#user-table tbody');
            if (!table) return;

            const rows = table.querySelectorAll('tr');
            rows.forEach(row => {
                row.style.display = '';
            });
            document.getElementById('myInput').value = '';
            document.getElementById('dateFilter').value = '';
        }

       
        // Sort table by a specific column
        let currentSortOrder = {
            column: -1,
            order: 'asc'
        };

               function sortTable(columnIndex) {
            const isAdmin = @Model.User.IsAdmin.ToString().ToLower(); // Sjekk om brukeren er admin
            const table = isAdmin ? document.querySelector('#admin-table tbody') : document.querySelector('#user-table tbody');
            if (!table) return; // Sjekk at tabellen faktisk finnes

            // Bytt sorteringsretning hvis samme kolonne klikkes
            if (currentSortOrder.column === columnIndex) {
                currentSortOrder.order = currentSortOrder.order === 'asc' ? 'desc' : 'asc';
            } else {
                currentSortOrder.column = columnIndex; // Oppdater til ny kolonne
                currentSortOrder.order = 'asc'; // Resett til stigende ved ny kolonne
            }

            const rows = Array.from(table.rows);

            rows.sort((rowA, rowB) => {
                let comparison = 0;

                // HÃ¥ndtering for dato
                const dateColumnIndex = isAdmin ? 4 : 3; // Bruk kolonne 4 for admin, 3 for bruker
                if (columnIndex === dateColumnIndex) {
                    const dateA = new Date(rowA.getAttribute('data-date'));
                    const dateB = new Date(rowB.getAttribute('data-date'));
                    comparison = dateA - dateB; // Sammenlign datoer
                } else if (columnIndex === 2) { // Hvis sorterer etter "Brukernavn" kolonnen
                    const cellA = rowA.cells[columnIndex].innerText.trim().toLowerCase();
                    const cellB = rowB.cells[columnIndex].innerText.trim().toLowerCase();
                    comparison = cellA.localeCompare(cellB); // Sammenlign tekst
                }

                // Juster sammenligning basert pÃ¥ sorteringsrekkefÃ¸lge
                return currentSortOrder.order === 'asc' ? comparison : -comparison;
            });

            // TÃ¸m tabellen fÃ¸r vi legger til de sorterte radene
            table.innerHTML = ''; // Raskere enn while-lÃ¸kke

            // Legg til de sorterte radene i tabellen
            rows.forEach(row => table.appendChild(row));
        }


        function sortTableBy(columnIndex, order) {
            const isAdmin = @Model.User.IsAdmin.ToString().ToLower();
            const sortBy = columnIndex === 2 ? 'username' : 'date'; // Adjust based on your needs
            sortTable(sortBy, order, isAdmin);
        }

        // Filtrer etter status
        function filterByStatus(status) {
            const table = document.querySelector('#admin-table tbody') || document.querySelector('#user-table tbody');
            if (!table) return;

            const rows = table.querySelectorAll('tr');
            rows.forEach(row => {
                row.style.display = row.dataset.status === status ? '' : 'none';
            });

            // Keep dropdown open after selection
            const dropdown = document.getElementById("myDropdown");
            dropdown.classList.add("show");
        }


        // Filter by selected date
        function filterByDate(selectedDate) {
            const rows = document.querySelectorAll('.user-info-table tbody tr'); // Select all rows in the user table
            rows.forEach(row => {
                const rowDate = row.getAttribute('data-date');
                row.style.display = rowDate === selectedDate ? '' : 'none'; // Hide or show based on date match
            });

            // Keep dropdown open after selection
            const dropdown = document.getElementById("myDropdown");
            dropdown.classList.add("show");
        }


    </script>



</body>
</html>
